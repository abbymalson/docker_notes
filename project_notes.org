* Docker
** Udemy Course
*** Docker tutorial for devops
    zero to docker hero in 4 hours ...
**** Introduction to virtualization technologies
***** bare metal ...
  hard to migrate

***** hypervisor-based Virtualization
      VM Ware and virtualbox
****** Benefits
       cost efficient, easy to scale
****** limitations
******* kernel resource duplication
******* Application portability issues


****** containers!
       we can get around the kernel duplication issues

******* benefits:
******** cost efficient
******** faster deployment
         guaranteed portability

**** Docker Software client-Server architechture

**** Installing Docker - skipped
**** Install Docker Toolbox - skipped
**** Important Concepts of Docker Technology
***** containers and images
****** Images
******* images are read only templates, used to create containers
******* images are created with docker build command
******* images are composed in layers of other images
******* Images are stored in a docker registry
****** containers
******* (instance of an image) - run time object
******* lightweight and portable encapsulations of an environment in which to run applications
******* containers are created from images. inside a container, it has all the binaries and dependencies needed to run the application
***** Registry and repositories
****** A registry is where we store our images
****** You can host your own registry, or you can use Docker's public registry which is called Dockerhub
****** Inside a registry, images are stored in repositories
****** Docker repository is a collection of different docker images with the same name, that have different tags, each tag usually represents a different version of the image.
***** Dockerhub
**** First Hello World Docker Container
***** Run our first hello world docker container
      #+name: command shell
      #+begin_src sh
      docker images
      # docker run repostiory:tag command [arguments]
      docker run busybox:1.24 echo "hello world"
      docker images
      docker run busybox:1.24 ls /
      # The -i flag starts an interactive container
      # The -t flag creates a pseudo-TTY that attaches to stdin and stdout
      docker run -i -t busybox:1.24
      #+end_src
**** Deep Dive into Docker Containers
****** running containers in detached mode
       docker run -d busybox:1.24 sleep 1000
       # this means docker is running in the background
****** docker ps command
        # docker ps
        # displays docker information in the background
****** docker container name
       docker run --rm busybox:1.24 sleep 1
        docker ps -a # to list the docker containers
        docker run --name hello_world busybox:1.24
        docker ps -a
****** docker inspect command
       docker run -d busybox:1.24 sleep 100

       docker inspect # copy and paste docker id
       # outputs lots of json information

**** Docker Port Mapping and Docker logs
     use the tomcat server image
docker run -it -p 8888:8080 tomcat:8.0
**** Extra Learning:

*** Working with Docker Images

  
*** Create Containerized Web Applications
*** Docker Networking
*** Create a Continuous Integration Pipeline
*** Deploy docker containers in Production

  
  #+name: 
  #+begin_src:
  #+end_src
